/*
 * Singleton.cpp
 *
 *  Created on: 19-Jan-2018
 *      Author: sudhanshu
 */

#include <utility>
#include "Singleton.hpp"

namespace mathematics {

void CalcEngineCreation::RegisterEngines() {
	std::call_once (enginesEnabled,registerNewEngines);
}

void CalcEngineCreation::registerNewEngines() {
	//Register Multiplier
	allowableOperation multiplier_Data(std::pair(std::string("Multiplier"),std::string("integer")));
	auto multiplierInstance = Multiplier::createINstance();
	available_engines.insert(std::pair<allowableOperation,Icalculation_Engine*>(multiplier_Data,multiplierInstance));

	//Register Divider
	allowableOperation divider_Data(std::pair(std::string("Divider"),std::string("integer")));
	auto dividerInstance = Divider::createINstance();
	available_engines.insert(std::pair<allowableOperation,Icalculation_Engine*>(divider_Data,dividerInstance));

	//Register Generic Engine
	allowableOperation generic_Data(std::pair(std::string("Generic"),std::string("integer")));
	auto genericInstance = GenericEngine::createINstance();
	available_engines.insert(std::pair<allowableOperation,Icalculation_Engine*>(generic_Data,genericInstance));

}

Icalculation_Engine* GetEngines(const std::string &EngineName,const std::string &input_type,
							tSpecializeOperation func = nullptr)
{

}

}



