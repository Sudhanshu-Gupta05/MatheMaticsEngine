/*
 * calc.cpp
 *
 *  Created on: 21-Jan-2018
 *      Author: sudhanshu
 */

#include "calc.hpp"
#include "Singleton.hpp"
#include "Divider.hpp"
#include "Multiplier.hpp"
#include "GenericEngine.hpp"

int file_list = 0; //default to integers

bool validCommandLine(int argc,char **argv)
{
	if(argc < 3)
		return false;

	//use regex
	 std::regex txt_regex("[a-z]+\\.txt");
	for(int i = 2; i < argc ; ++i)
	{
		std::string text = argv[i];
		bool match = std::regex_match(text, txt_regex);
		if(match)
		{
			file_list = 1;
		}
	}

	return true;
}

void standardDeviation(const Icalculation_Engine &getCalculationEngine)
{
	std::cout << "Users need to specialize the functions" << std::endl;
}

void listofIntegers(int argc, char **argv,Icalculation_Engine *getCalculationEngine,int &result)
{
	std::vector<int> vec;
	for(int i = 2; i < argc;++i)
	{
		vec.push_back(std::stoi(std::string(argv[i])));
	}
	if(typeid(*getCalculationEngine) == typeid(Divider))
	{
		Divider *divider = dynamic_cast<Divider*>(getCalculationEngine);
		if(divider!= nullptr)
		{
			divider->performOperation(vec,result);
		}
	}
	if(typeid(*getCalculationEngine) == typeid(Multiplier))
	{
		Multiplier *multiplier = dynamic_cast<Multiplier*>(getCalculationEngine);
		if(multiplier!= nullptr)
		{
			multiplier->performOperation(vec,result);
		}
	}
	if(typeid(*getCalculationEngine) == typeid(GenericEngine))
	{
		GenericEngine *genericEngine = dynamic_cast<GenericEngine*>(getCalculationEngine);
		if(genericEngine!= nullptr)
		{
			std::function<void(const Icalculation_Engine&)> obj(standardDeviation);
			genericEngine->setCalculateFunction(obj);
			genericEngine->performSpecilizedOperation();
		}
	}
}

void listofFiles(int argc, char **argv,Icalculation_Engine *getCalculationEngine,int &result)
{
	for(int i = 2; i < argc;++i)
	{
		std::string filename(argv[i]);
		std::ifstream fs;

		fs.open (filename, std::ifstream::in);

		if(!fs.is_open())
			continue;

		if(typeid(*getCalculationEngine) == typeid(Divider))
		{
			Divider *divider = dynamic_cast<Divider*>(getCalculationEngine);
			if(divider!= nullptr)
			{
				divider->performOperation(fs,result);
			}
		}
		if(typeid(*getCalculationEngine) == typeid(Multiplier))
		{
			Multiplier *multiplier = dynamic_cast<Multiplier*>(getCalculationEngine);
			if(multiplier!= nullptr)
			{
				multiplier->performOperation(fs,result);
			}
		}

	}
}

int runApp(int argc,char *argv[])
{
	bool checkValidArguments = validCommandLine(argc,argv);

	if(!checkValidArguments)
		return -1;

	//Create and register your engine
	CalcEngineCreation engine;
	engine.RegisterEngines();

	auto getCalculationEngine = engine.GetEngines(argv[1],"integer");

	int result = 0;

	if(!file_list)
	{
		listofIntegers(argc,argv,getCalculationEngine,result);
	}
	else
	{
		listofFiles(argc,argv,getCalculationEngine,result);
	}

	std::cout << result << std::endl;

	return 0;
}




