/*
 * Singleton.cpp
 *
 *  Created on: 19-Jan-2018
 *      Author: sudhanshu
 */

#include "Singleton.hpp"

namespace mathematics {

void CalcEngineCreation::RegisterEngines() {
	std::call_once (enginesEnabled,CalcEngineCreation::registerNewEngines);
}

void CalcEngineCreation::registerNewEngines() {
	//Register Multiplier
	allowableOperation multiplier_Data(allowableOperation(std::string("Multiplier"),std::string("integer")));
	auto multiplierInstance = Multiplier::createINstance();
	available_engines.insert(std::pair<allowableOperation,Icalculation_Engine*>(multiplier_Data,multiplierInstance));

	//Register Divider
	allowableOperation divider_Data(allowableOperation(std::string("Divider"),std::string("integer")));
	auto dividerInstance = Divider::createINstance();
	available_engines.insert(std::pair<allowableOperation,Icalculation_Engine*>(divider_Data,dividerInstance));

	//Register Generic Engine
	allowableOperation generic_Data(allowableOperation(std::string("Generic"),std::string("integer")));
	auto genericInstance = GenericEngine::createINstance();
	available_engines.insert(std::pair<allowableOperation,Icalculation_Engine*>(generic_Data,genericInstance));

}

Icalculation_Engine* CalcEngineCreation::GetEngines(const std::string &EngineName,const std::string &input_type,
							tSpecializeOperation func)
{

	allowableOperation input_Data(allowableOperation(EngineName,input_type));
	auto itr = available_engines.find(input_Data);
	if(itr != available_engines.end())
	{
		if(itr->first.second == input_Data.second)
		{
			if(func != nullptr && EngineName == std::string("Generic"))
			{
				auto generic = dynamic_cast<GenericEngine*>(itr->second);
				if(!generic)
				{
					generic->performSpecilizedOperation();
				}
			}
			return itr->second;
		}
	}

	return nullptr;
}

}//end namespace mathematics



